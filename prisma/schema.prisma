// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

//to do: Fornecedor, Cliente, Estoque, Produto e Funcion√°rio
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Categoria {
  id   Int    @id @default(autoincrement())
  nome String

  Produtos Produto[]

  @@map("categorias")
}

model Produto {
  id     String  @id @default(uuid()) @db.Uuid
  nome   String
  marca  String
  preco  Float
  codigo Int
  Vendas Venda[]

  categoriaId Int?
  estoqueId   String? @db.Uuid
  vendaId     String? @db.Uuid

  Categoria Categoria? @relation(fields: [categoriaId], references: [id])
  Estoque   Estoque?   @relation(fields: [estoqueId], references: [id])

  @@map("produtos")
}

model Estoque {
  id         String @id @default(uuid()) @db.Uuid
  nome       String
  quantidade Int

  Produtos Produto[]
}

model Venda {
  id         String    @id @default(uuid()) @db.Uuid
  valor      Float
  quantidade Int
  dataVenda  DateTime  @default(now())
  Produtos   Produto[]

  funcionarioId String? @db.Uuid

  Funcionario Funcionario? @relation(fields: [funcionarioId], references: [id])
}

enum CargoFuncionario {
  GERENTE
  ATENDENTE
}

model Funcionario {
  id         String           @id @default(uuid()) @db.Uuid
  nome       String
  apelido    String
  cpf        String           @unique
  email      String
  telefone   String
  cargo      CargoFuncionario
  enderecoId String?

  Vendas Venda[]

  Endereco Endereco? @relation(fields: [enderecoId], references: [id])
}

model Endereco {
  id          String        @id @default(uuid())
  cidade      String
  cep         String
  numero      Int
  rua         String
  bairro      String
  complemento String
  Funcionario Funcionario[]
}
